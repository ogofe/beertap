[{"/home/unitvjdm/beertap.binsoft.online/beertap/src/index.js":"1","/home/unitvjdm/beertap.binsoft.online/beertap/src/reportWebVitals.js":"2","/home/unitvjdm/beertap.binsoft.online/beertap/src/App.js":"3","/home/unitvjdm/beertap.binsoft.online/beertap/src/contexts/userContext.js":"4","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/services/authService.js":"5","/home/unitvjdm/beertap.binsoft.online/beertap/src/components/Navbar.jsx":"6","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/beers/UpdateBeer.jsx":"7","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/breweries/AddBreweries.jsx":"8","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/breweries/UpdateBreweries.jsx":"9","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/suppliers/AddSuppliers.jsx":"10","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/breweries/Breweries.jsx":"11","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/suppliers/UpdateSupplier.jsx":"12","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/suppliers/Suppliers.jsx":"13","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/categories/AddCategories.jsx":"14","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/categories/Categories.jsx":"15","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/kegsizes/AddKegSize.jsx":"16","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/categories/UpdateCategories.jsx":"17","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/kegsizes/UpdateKegsize.jsx":"18","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/users/AddUsers.jsx":"19","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/users/Users.jsx":"20","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/users/Login.jsx":"21","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/kegsizes/KegSize.jsx":"22","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/taplist/Deliveries.jsx":"23","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/users/UpdateUser.jsx":"24","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/beers/Beers.jsx":"25","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/taplist/TapList.jsx":"26","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/beers/AddBeer.jsx":"27","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/taplist/UntappedList.jsx":"28"},{"size":535,"mtime":1699301504809,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1699301504811,"results":"31","hashOfConfig":"30"},{"size":8227,"mtime":1699301504795,"results":"32","hashOfConfig":"30"},{"size":2088,"mtime":1699301504795,"results":"33","hashOfConfig":"30"},{"size":1406,"mtime":1699301504810,"results":"34","hashOfConfig":"30"},{"size":2691,"mtime":1699301504795,"results":"35","hashOfConfig":"30"},{"size":3290,"mtime":1699301504810,"results":"36","hashOfConfig":"30"},{"size":1941,"mtime":1699301504810,"results":"37","hashOfConfig":"30"},{"size":2739,"mtime":1699301504810,"results":"38","hashOfConfig":"30"},{"size":1688,"mtime":1699301504810,"results":"39","hashOfConfig":"30"},{"size":5144,"mtime":1699301504810,"results":"40","hashOfConfig":"30"},{"size":2467,"mtime":1699301504810,"results":"41","hashOfConfig":"30"},{"size":5030,"mtime":1699301504810,"results":"42","hashOfConfig":"30"},{"size":1947,"mtime":1699301504810,"results":"43","hashOfConfig":"30"},{"size":5163,"mtime":1699301504810,"results":"44","hashOfConfig":"30"},{"size":1593,"mtime":1699301504810,"results":"45","hashOfConfig":"30"},{"size":2740,"mtime":1699301504810,"results":"46","hashOfConfig":"30"},{"size":2433,"mtime":1699301504810,"results":"47","hashOfConfig":"30"},{"size":3398,"mtime":1699301504811,"results":"48","hashOfConfig":"30"},{"size":5251,"mtime":1699301504811,"results":"49","hashOfConfig":"30"},{"size":2689,"mtime":1699301504811,"results":"50","hashOfConfig":"30"},{"size":4979,"mtime":1699301504810,"results":"51","hashOfConfig":"30"},{"size":4087,"mtime":1699301504811,"results":"52","hashOfConfig":"30"},{"size":4304,"mtime":1699301504811,"results":"53","hashOfConfig":"30"},{"size":11563,"mtime":1699301504809,"results":"54","hashOfConfig":"30"},{"size":5211,"mtime":1699301504811,"results":"55","hashOfConfig":"30"},{"size":16542,"mtime":1699301504809,"results":"56","hashOfConfig":"30"},{"size":5225,"mtime":1699301504811,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13z6ost",{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},"/home/unitvjdm/beertap.binsoft.online/beertap/src/index.js",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/reportWebVitals.js",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/App.js",["122","123","124","125","126","127","128","129"],"import React, { useState, useEffect } from 'react';\nimport { RouterProvider, createBrowserRouter, Outlet, Routes, Navigate, useNavigate } from 'react-router-dom';\nimport Navigation from './components/Navbar';\nimport { UserProvider, useUser } from './contexts/userContext';\nimport { loginWithToken } from './pages/services/authService';\nimport './styles.css';\n\nimport Beers from './pages/beers/Beers';\nimport AddBeer from './pages/beers/AddBeer';\nimport UpdateBeer from './pages/beers/UpdateBeer';\nimport Breweries from './pages/breweries/Breweries';\nimport AddBreweries from './pages/breweries/AddBreweries';\nimport UpdateBrewery from './pages/breweries/UpdateBreweries';\nimport Suppliers from './pages/suppliers/Suppliers';\nimport AddSuppliers from './pages/suppliers/AddSuppliers';\nimport UpdateSupplier from './pages/suppliers/UpdateSupplier';\nimport Categories from './pages/categories/Categories';\nimport AddCategories from './pages/categories/AddCategories';\nimport UpdateCategory from './pages/categories/UpdateCategories';\nimport KegSize from './pages/kegsizes/KegSize';\nimport AddKegSize from './pages/kegsizes/AddKegSize';\nimport UpdateKegsize from './pages/kegsizes/UpdateKegsize';\nimport Users from './pages/users/Users';\nimport AddUsers from './pages/users/AddUsers';\nimport UpdateUser from './pages/users/UpdateUser';\nimport TapList from './pages/taplist/TapList'\nimport UntappedList from './pages/taplist/UntappedList';\nimport Deliveries from './pages/taplist/Deliveries';\nimport Login from './pages/users/Login';\n\n//import Router from './components/Routers'\n\nconst Layout = () => {\n  return(\n    <>\n    <Navigation />\n    <Outlet />\n    </>\n  )\n}\n\n// Protect the application and give access on login\n// function ProtectedRoute() {\n//   const { user } = useUser();\n\n//   if (user.isAuthenticated) {\n//     return (\n//       <>\n//         {/* <Navigation />\n//         <Outlet /> */}\n//         <Layout />\n//       </>\n//     );\n//   }\n\n//   return <Navigate to=\"/\" />;\n// }\n\n// const ConditionalRoute = () => {\n//   const { user } = useUser();\n\n//   if (user.isAuthenticated) {\n//     // User is authenticated, redirect to the authenticated page\n//     return <Navigate to=\"/beers\" />;\n//   } else {\n//     // User is not authenticated, redirect to the login page\n//     return (\n//       <>\n//        <Navigate to='/' />;\n//        </>\n//     )\n//   }\n// }\n\n\nconst router = createBrowserRouter([\n\n  // Public Route for login page\n  {\n    path: \"/\",\n    element: <>\n      {/* <ConditionalRoute /> */}\n      {/* <Login /> */}\n      <Layout /> \n      <Beers /> \n    </>,\n  },\n\n  // For beer display, add and update\n  {\n    path: \"/beers\",\n    element: (\n      <>\n      {/* <ProtectedRoute /> */}\n        <Layout />\n        {/* <Outlet />  */}\n      </>\n    ),\n    children: [\n      {\n        index: true, // The root path for the \"Beers\" route\n        element: <Beers />, // Display the Beers component when accessing \"/beers\"\n      },\n      {\n        path: \"add\",\n        element: <AddBeer />,\n      },\n      {\n        path: \"update/:id\",\n        element: <UpdateBeer />,\n      },\n    ],\n  },\n  // Define other sections and routes similarly\n\n  // For breweries display, add and update\n  {\n    path: \"/breweries\",\n    element: (\n      <>\n      {/* <ProtectedRoute /> */}\n        <Layout />\n        {/* <Outlet /> */}\n      </>\n    ),\n    children: [\n      {\n        index: true, // The root path for the \"Beers\" route\n        element: <Breweries />, // Display the Beers component when accessing \"/beers\"\n      },\n      {\n        path: \"add\",\n        element: <AddBreweries />,\n      },\n      {\n        path: \"update/:id\",\n        element: <UpdateBrewery />,\n      },\n    ],\n  },\n\n  // For categories display, add and update\n  {\n    path: \"/categories\",\n    element: (\n      <>\n      {/* <ProtectedRoute /> */}\n        <Layout />\n        {/* <Outlet />  */}\n      </>\n    ),\n    children: [\n      {\n        index: true, // The root path for the \"Beers\" route\n        element: <Categories />, // Display the Beers component when accessing \"/beers\"\n      },\n      {\n        path: \"add\",\n        element: <AddCategories />,\n      },\n      {\n        path: \"update/:id\",\n        element: <UpdateCategory />,\n      },\n    ],\n  },\n\n  // For kegsizes display, add and update\n  {\n    path: \"/kegsizes\",\n    element: (\n      <>\n      {/* <ProtectedRoute /> */}\n        <Layout />\n        {/* <Outlet />  */}\n      </>\n    ),\n    children: [\n      {\n        index: true, // The root path for the \"Beers\" route\n        element: <KegSize />, // Display the Kegsize component when accessing \"/kegsizes\"\n      },\n      {\n        path: \"add\",\n        element: <AddKegSize />,\n      },\n      {\n        path: \"update/:id\",\n        element: <UpdateKegsize />,\n      },\n    ],\n  },\n\n  // For Suppliers display, add and update\n  {\n    path: \"/suppliers\",\n    element: (\n      <>\n      {/* <ProtectedRoute /> */}\n        <Layout />\n        {/* <Outlet />  */}\n      </>\n    ),\n    children: [\n      {\n        index: true, // The root path for the \"Beers\" route\n        element: <Suppliers />, // Display the Kegsize component when accessing \"/kegsizes\"\n      },\n      {\n        path: \"add\",\n        element: <AddSuppliers />,\n      },\n      {\n        path: \"update/:id\",\n        element: <UpdateSupplier />,\n      },\n    ],\n  },\n\n  // For Users display, add and update\n  {\n    path: \"/users\",\n    element: (\n      <>\n      {/* <ProtectedRoute /> */}\n        <Layout />\n        {/* <Outlet /> */}\n      </>\n    ),\n    children: [\n      {\n        index: true, \n        element: <Users />,\n      },\n      {\n        path: \"add\",\n        element: <AddUsers />,\n      },\n      {\n        path: \"update/:id\",\n        element: <UpdateUser />,\n      },\n    ],\n  },\n\n   // For Taplist display\n   {\n    path: \"/taplist\",\n    element: (\n      <>\n      {/* <ProtectedRoute /> */}\n        <Layout />\n        {/* <Outlet /> */}\n      </>\n    ),\n    children: [\n      {\n        index: true,\n        element: <TapList />,\n      },\n    ],\n  },\n\n     // For Untaplist display\n     {\n      path: \"/untaplist\",\n      element: (\n        <>\n        {/* <ProtectedRoute /> */}\n          <Layout />\n          {/* <Outlet /> */}\n        </>\n      ),\n      children: [\n        {\n          index: true,\n          element: <UntappedList />,\n        },\n      ],\n    },\n\n   // For Deliverias display\n   {\n    path: \"/deliveries\",\n    element: (\n      <>\n      {/* <ProtectedRoute /> */}\n        <Layout />\n        {/* <Outlet /> */}\n      </>\n    ),\n    children: [\n      {\n        index: true,\n        element: <Deliveries />,\n      },\n    ],\n  },\n\n  // {\n  //   path: 'conditional',\n  //   element: <ConditionalRoute />,\n  // },\n\n]);\n\n\n\nfunction App() {\n  // Define your router and routes...\n\n  // const navigate = useNavigate();\n  // const { dispatch } = useUser();\n\n  // useEffect(() => {\n  //   const storedToken = localStorage.getItem('token');\n  //   if (storedToken) {\n  //     console.log('Token found:', storedToken);\n  //     // Log in the user with the token\n  //     loginWithToken(storedToken)\n  //       .then((response) => {\n  //         console.log('Login with token successful:', response);\n  //         // Handle user login and additional actions here\n  //         // dispatch({ type: 'SET_USER_DATA', payload: response.data });\n  //         navigate('/beers'); // Redirect to the desired page\n  //       })\n  //       .catch((error) => {\n  //         // Handle any errors, e.g., token invalid\n  //         console.error('Login with token failed:', error.message);\n  //         // You may choose to remove the invalid token here\n  //         localStorage.removeItem('token');\n  //         navigate('/'); // Redirect to the login page\n  //       });\n  //   }\n  // }, [navigate, dispatch]);\n\n\n  // Wrap the component using useNavigate inside the RouterProvider\n  return (\n    <UserProvider>\n      <div className='App'>\n      <RouterProvider router={router}>\n    </RouterProvider>\n      </div>\n      </UserProvider>\n  );\n}\n\n\n// function MainApp() {\n\n//   return (\n//     <div className=\"App\">\n//     <UserProvider>\n//     <RouterProvider router={router}>\n//     </RouterProvider>\n//     </UserProvider>\n//     </div>\n//   );\n// }\n\n\nexport default App;\n","/home/unitvjdm/beertap.binsoft.online/beertap/src/contexts/userContext.js",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/services/authService.js",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/components/Navbar.jsx",["130","131"],"import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Navbar, Container, Nav, NavDropdown } from 'react-bootstrap';\nimport { NavLink, useNavigate } from 'react-router-dom'; // Import NavLink from react-router-dom\n\nfunction Navigation() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    // Check if the user is logged in by inspecting local storage\n    const token = localStorage.getItem('token');\n    setIsLoggedIn(!!token);\n  }, []);\n\n  const handleLogout = () => {\n    // Clear user data and redirect to the login page\n    localStorage.removeItem('token');\n    setIsLoggedIn(false);\n    // dispatch({ type: 'LOGOUT' });\n    navigate('/')\n// Reload the page\n    // window.location.reload();\n  };\n\n  return (\n    <Navbar className=\"fixed-top\" expand=\"lg\" bg=\"dark\" data-bs-theme=\"dark\">\n      <Container>\n        <Navbar.Brand as={NavLink} to=\"/beers\">\n          University Of Beer\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"me-auto\">\n            <Nav.Link as={NavLink} to=\"/beers\">\n              Beers\n            </Nav.Link>\n            <Nav.Link as={NavLink} to=\"/beers/add\">\n              Order Beer\n            </Nav.Link>\n            <Nav.Link as={NavLink} to=\"/taplist\">\n              Tapped List\n            </Nav.Link>\n\n            <Nav.Link as={NavLink} to=\"/untaplist\">\n              Unapped List\n            </Nav.Link>\n            <Nav.Link as={NavLink} to=\"/deliveries\">\n              Deliveries\n            </Nav.Link>\n            <NavDropdown title=\"Extra\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item as={NavLink} to=\"/breweries\">\n                Breweries\n              </NavDropdown.Item>\n              <NavDropdown.Item as={NavLink} to=\"/categories\">\n                Categories\n              </NavDropdown.Item>\n              <NavDropdown.Item as={NavLink} to=\"/suppliers\">\n                Suppliers\n              </NavDropdown.Item>\n              <NavDropdown.Item as={NavLink} to=\"/kegsizes\">\n                Keg Sizes\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item as={NavLink} to=\"/users\">\n                Staff\n              </NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n          {/* <Nav.Link as={NavLink} to=\"/\" className=\"ms-auto\" style={{ color: 'white' }} onClick={isLoggedIn ? handleLogout : null}>\n            {isLoggedIn ? 'Logout' : 'Login'}\n          </Nav.Link> */}\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default Navigation;\n","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/beers/UpdateBeer.jsx",["132","133"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Button, InputGroup, Form } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\n\nfunction UpdateBeer() {\n  const [beer, setBeer] = useState({\n    tap_number: '',\n    // name: '',\n    // type: '',\n    // brewery_id: '',\n    // supplier_id: '',\n    // description: '',\n    // flavor_details: '',\n    // price_per_keg: '',\n    // arrival_date: '',\n    // keg_size: '',\n    // serving_sizes: '',\n    // price_per_serving_size: '',\n    // category_id: null,\n    // tap_id: null,\n  });\n\n  const [updateConfirmation, setUpdateConfirmation] = useState(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [isDisabled, setIsDisabled] = useState(true);\n  const beerId = location.pathname.split('/')[3];\n  //const { beerId } = useParams();\n\n  useEffect(() => {\n    const fetchBeer = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5001/api/beers/${beerId}`);\n        setBeer(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchBeer();\n  }, [beerId]);\n\n  const handleChange = (e) => {\n    setBeer((prev) => ({ ...prev, [e.target.name]: e.target.value }));\n  };\n\n  const handleClick = async (e) => {\n    e.preventDefault();\n    const beerUrl = `http://localhost:5001/api/beers/${beerId}`;\n    try {\n      await axios.put(beerUrl, beer);\n      setUpdateConfirmation('Record updated successfully.');\n      navigate('/beers');\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n      <div className='form contMargin'>\n        <br />\n        <h1 className='listUntapTitle'>Add Tap Number</h1>\n        {updateConfirmation && (\n          <p style={{ color: 'green', fontWeight: 'bold' }}>{updateConfirmation}</p>\n        )}\n\n        {/* Add other form fields here */}\n        <div>\n          <InputGroup size='lg'>\n            <InputGroup.Text id='inputGroup-sizing-lg'>Tap Number</InputGroup.Text>\n            {beer.tap_number !== undefined && (\n              <Form.Control\n                onChange={handleChange}\n                type='number'\n                name='tap_number'\n                value={beer.tap_number}\n                aria-label='Large'\n                aria-describedby='inputGroup-sizing-sm'\n              />\n            )}\n          </InputGroup>\n        </div>\n\n        <div>\n          <InputGroup size='lg'>\n            <InputGroup.Text id='inputGroup-sizing-lg'>Name</InputGroup.Text>\n            <Form.Control\n              onChange={handleChange}\n              name='name'\n              value={beer.name}\n              aria-label='Large'\n              aria-describedby='inputGroup-sizing-sm'\n              disabled = {isDisabled}\n            />\n          </InputGroup>\n        </div>\n\n        {/* Add more fields similarly */}\n\n        <div className='btn-div'>\n          <Button className='btn-extra' variant='primary' size='lg' onClick={handleClick}>\n            Add\n          </Button>\n          <Button variant='primary' size='lg' href='/beers' className='update-link btn-extra'>\n            Back\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default UpdateBeer;\n","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/breweries/AddBreweries.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/breweries/UpdateBreweries.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/suppliers/AddSuppliers.jsx",["134","135"],"import React, { useState} from 'react'\nimport axios from 'axios'\nimport { useNavigate } from 'react-router-dom'\n//import { Link } from 'react-router-dom';\nimport {Button, InputGroup, Form} from 'react-bootstrap'\n\nfunction AddSuppliers() {\n    const [required, setRequired] = [true]\n    const [supplier, setSupplier] = useState({\n        name: \"\"\n    })\n\n    const navigate = useNavigate()\n\n    const handleChange = (e) => {\n        setSupplier((prev) => ({...prev, [e.target.name]: e.target.value}))\n    }\n    console.log(supplier)\n\n    const handleClick = async e => {\n        e.preventDefault()\n        const supplierUrl = \"http://localhost:5001/api/suppliers/\"\n        console.log(supplierUrl)\n        try {\n            await axios.post(supplierUrl, supplier)\n            navigate(\"/suppliers\")\n        } catch (err) {\n            console.log(err)\n            \n        }\n    }\n\n  return (\n    <>\n    <div className='form contMargin'>\n        <br />\n        <h1 className='listUntapTitle'>Add New Supplier</h1>\n        <InputGroup size=\"lg\">\n        <InputGroup.Text id=\"inputGroup-sizing-lg\">Supplier Name</InputGroup.Text>\n        <Form.Control\n          onChange={handleChange} \n          name='name'\n          aria-label=\"Large\"\n          aria-describedby=\"inputGroup-sizing-sm\"\n          setRequired\n          \n        />\n        </InputGroup>\n        <div className=\"btn-div\">\n        <Button className='btn-extra' variant='primary' size='lg' onClick={handleClick}>Add</Button>\n        <Button variant='primary' size='lg' href={\"/suppliers\"} className=\"update-link btn-extra\">\n            Back\n        </Button>\n        </div>\n    </div>\n    </>\n  )\n}\n\nexport default AddSuppliers","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/breweries/Breweries.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/suppliers/UpdateSupplier.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/suppliers/Suppliers.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/categories/AddCategories.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/categories/Categories.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/kegsizes/AddKegSize.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/categories/UpdateCategories.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/kegsizes/UpdateKegsize.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/users/AddUsers.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/users/Users.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/users/Login.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/kegsizes/KegSize.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/taplist/Deliveries.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/users/UpdateUser.jsx",["136"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Button, InputGroup, Form, Dropdown } from 'react-bootstrap';\n\nfunction UpdateUser() {\n  const [user, setUser] = useState({\n    username: \"\",\n    password : '',\n    full_name:\"\",\n    email: \"\",\n    role: \"\"\n  });\n\n  const [updateConfirmation, setUpdateConfirmation] = useState(null); // Added state for update confirmation\n  const navigate = useNavigate();\n  const location = useLocation();\n  const userId = location.pathname.split('/')[3];\n //console.log(user.username)\n\n  useEffect(() => {\n    // Fetch existing data from the API\n    const fetchUser = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5001/api/users/${userId}`);\n        // Set the existing data as the initial state for the input field\n        setUser(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchUser();\n  }, [userId]);\n\n   // Handle text change\n  const handleChange = (e) => {\n    setUser((prev) => ({ ...prev, [e.target.name]: e.target.value }));\n  };\n\n  // Handle dropdown select value\n  const handleRoleSelect = (selectedRole) => {\n    setUser((prev) => ({ ...prev, role: selectedRole }));\n  };\n\n  const handleClick = async (e) => {\n    e.preventDefault();\n    const userUrl = `http://localhost:5001/api/users/${userId}`;\n    try {\n      await axios.put(userUrl, user);\n      setUpdateConfirmation('Record updated successfully.'); // Set the update confirmation message\n      navigate('/users');\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <>\n <div className='form contMargin'>\n        <h1>Update Staff</h1>\n        <div>\n        <InputGroup size=\"lg\">\n        <InputGroup.Text id=\"inputGroup-sizing-lg\">Username</InputGroup.Text>\n        <Form.Control\n          onChange={handleChange}\n          name='username'\n          value={user.username} \n          aria-label=\"Large\"\n          aria-describedby=\"inputGroup-sizing-sm\"\n        />\n        </InputGroup>\n        </div>\n        <div>\n        <InputGroup size=\"lg\">\n        <InputGroup.Text id=\"inputGroup-sizing-lg\">Password</InputGroup.Text>\n        <Form.Control\n          onChange={handleChange}\n          type='password' \n          name='password'\n          value={user.password}\n          aria-label=\"Large\"\n          aria-describedby=\"inputGroup-sizing-sm\"\n        />\n        </InputGroup>\n        </div>\n        <div>\n        <InputGroup size=\"lg\">\n        <InputGroup.Text id=\"inputGroup-sizing-lg\">Full Name</InputGroup.Text>\n        <Form.Control\n          onChange={handleChange} \n          name='full_name'\n          value={user.full_name}\n          aria-label=\"Large\"\n          aria-describedby=\"inputGroup-sizing-sm\"\n        />\n        </InputGroup>\n        </div>\n        <div>\n        <InputGroup size=\"lg\">\n        <InputGroup.Text id=\"inputGroup-sizing-lg\">Email</InputGroup.Text>\n        <Form.Control\n          onChange={handleChange} \n          name='email'\n          value={user.email}\n          aria-label=\"Large\"\n          aria-describedby=\"inputGroup-sizing-sm\"\n        />\n        </InputGroup>\n        </div>\n        <div>\n          <InputGroup size='lg'>\n            <InputGroup.Text id='inputGroup-sizing-lg'>Role</InputGroup.Text>\n            <Dropdown>\n              <Dropdown.Toggle variant='secondary' id='dropdown-basic'>\n                {user.role || 'Select Role'}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item onClick={() => handleRoleSelect('Super Admin')}>Super Admin</Dropdown.Item>\n                <Dropdown.Item onClick={() => handleRoleSelect('Admin')}>Admin</Dropdown.Item>\n                <Dropdown.Item onClick={() => handleRoleSelect('Basic User')}>Basic User</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </InputGroup>\n        </div>\n        <div className='btn-div'>\n        <Button className='btn-extra' variant='primary' size='lg' onClick={handleClick}>\n            Update\n        </Button>\n        <Button variant='primary' size='lg' href={\"/users\"} className=\"update-link btn-extra\">\n            Back\n        </Button>\n    </div>\n\n      </div>\n    </>\n  );\n}\n\nexport default UpdateUser;\n","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/beers/Beers.jsx",["137","138","139","140"],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n//import { useNavigate } from 'react-router-dom';\nimport { Button, Container, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Beers() {\n  const [isDeleted, setIsDeleted] = useState(false);\n  const [beers, setBeers] = useState([]);\n  const [deleteConfirmation, setDeleteConfirmation] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(''); // Manage search functionality\n  const maxRecords = 10; // Define the maximum number of records per table\n  const [activePage, setActivePage] = useState(0);\n  const beerUrl = \"http://localhost:5001/api/beers/\";\n\n  const [breweryNames, setBreweryNames] = useState({});\n  const [supplierNames, setSupplierNames] = useState({});\n  const [isDisabled, setIsDisabled] = useState(true);\n  //const navigate = useNavigate();\n\n  // Calculate the range of records to display on the current page\n  const start = activePage * maxRecords;\n  const end = start + maxRecords;\n\n  useEffect(() => {\n    // Fetch all beers using the useEffect\n    const fetchAllBeers = async () => {\n      try {\n        const res = await axios.get(beerUrl);\n        setBeers(res.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchAllBeers();\n  }, [isDeleted]);\n\n  useEffect(() => {\n    // Fetch all brewery names and store them in the state\n    const fetchBreweryNames = async () => {\n      const names = {};\n      for (const beer of beers.slice(start, end)) {\n        const breweryName = await fetchBreweryName(beer.brewery_id);\n        names[beer.product_id] = breweryName;\n      }\n      setBreweryNames(names);\n    };\n\n    const fetchSupplierNames = async () => {\n      const names = {};\n      for (const beer of beers.slice(start, end)) {\n        const supplierName = await fetchSupplierName(beer.supplier_id);\n        names[beer.supplier_id] = supplierName;\n      }\n      setSupplierNames(names);\n    };\n\n    fetchBreweryNames();\n    fetchSupplierNames();\n  }, [beers, start, end]);\n\n  // Helper function to format a date string as a short date (e.g., \"MM/DD/YYYY\")\n  const formatDate = (dateString) => {\n    const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n\n  // Define an async function to fetch the brewery name based on brewery_id\n  const fetchBreweryName = async (breweryId) => {\n    try {\n      const response = await axios.get(`http://localhost:5001/api/breweries/${breweryId}`);\n      return response.data.name; // Assuming the brewery name is available in the response\n    } catch (err) {\n      console.log(err);\n      return \"Unknown Brewery\"; // Handle errors gracefully\n    }\n  };\n\n  // Define an async function to fetch the supplier name based on supplier_id\n  const fetchSupplierName = async (supplierId) => {\n    try {\n      const response = await axios.get(`http://localhost:5001/api/suppliers/${supplierId}`);\n      return response.data.name; // Assuming the supplier name is available in the response\n    } catch (err) {\n      console.log(err);\n      return \"Unknown Supplier\"; // Handle errors gracefully\n    }\n  };\n\n  useEffect(() => {\n    // Check if a delete confirmation message is stored in localStorage\n    const storedConfirmation = localStorage.getItem('deleteConfirmation');\n    if (storedConfirmation) {\n      setDeleteConfirmation(storedConfirmation);\n      // Clear the stored message to prevent displaying it on subsequent visits\n      localStorage.removeItem('deleteConfirmation');\n    }\n  }, []); // Run this effect only once on initial load\n\n  const handleDelete = (id) => {\n    // Display a confirmation prompt\n    const confirmDelete = window.confirm('Are you sure you want to delete this record?');\n\n    if (confirmDelete) {\n      const deleteUrl = `${beerUrl}${id}`;\n      axios\n        .delete(deleteUrl)\n        .then((response) => {\n          setIsDeleted(true);\n          const confirmationMessage = 'Record deleted successfully.';\n          setDeleteConfirmation(confirmationMessage);\n          // Store the confirmation message in localStorage\n          localStorage.setItem('deleteConfirmation', confirmationMessage);\n          // Reload the page\n          window.location.reload();\n        })\n        .catch((error) => {\n          console.log(error);\n          setIsDeleted(false);\n          setDeleteConfirmation('Failed to delete the record.');\n        });\n    }\n\n  };\n\n  const handleNext = () => {\n    if (activePage < Math.ceil(beers.length / maxRecords) - 1) {\n      setActivePage(activePage + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (activePage > 0) {\n      setActivePage(activePage - 1);\n    }\n  };\n\n  // Define a function to handle search input change\n  const handleSearchChange = (e) => {\n    setSearchQuery(e.target.value);\n  };\n\n  // Define a function to perform the search based on the search query\n  const handleSearch = () => {\n    // Filter beers based on the search query\n    const filtered = filterBeers(searchQuery);\n    // Reset the active page to 0 when performing a search\n    setActivePage(0);\n    // Set the filtered beers as the current display\n    setBeers(filtered);\n  };\n\n  // Define a function to reset the search and show all beers\n  const resetSearch = async () => {\n    setSearchQuery('');\n    try {\n      const res = await axios.get(beerUrl);\n      setBeers(res.data);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // Define a function to filter beers based on search query\n  const filterBeers = (query) => {\n    return beers.filter((beer) =>\n      beer.name.toLowerCase().includes(query.toLowerCase())\n    );\n  };\n\n  return (\n    <div>\n      <Container className='contMargin'>\n        <br />\n        <div className='orderNew'>\n        <h1 className='orderTitle listUntapTitle'>Beer Stock</h1>\n            <Button variant='primary' size='lg'>\n              <Link to=\"/beers/add\" className=\"update-link\">\n                Order Beer\n              </Link>\n            </Button>\n        </div><br />\n        \n        {deleteConfirmation && (\n          <p style={{ color: 'green', fontWeight: 'bold' }}>{deleteConfirmation}</p>\n        )}\n\n        {/* Add the search input field */}\n        <InputGroup className='mb-3'>\n          <FormControl\n            placeholder='Search Beer Inventory by name...'\n            aria-label='Search Beer'\n            aria-describedby='basic-addon2'\n            value={searchQuery}\n            onChange={handleSearchChange}\n          />\n          <Button\n            variant='outline-primary'\n            id='button-addon2'\n            onClick={handleSearch}\n          >\n            Search\n          </Button>\n          <Button\n            variant='outline-secondary'\n            id='button-addon2'\n            onClick={resetSearch}\n          >\n            Clear\n          </Button>\n        </InputGroup>\n\n        {beers.length === 0 ? (\n          <p className='noBeers'>SORRY : No Beers Found</p>\n        ) : (\n          <>\n            <table className=\"brewery-table\">\n              <thead>\n                <tr>\n                  <th className='tbl-left'>Tap Number</th>\n                  <th className='tbl-left'>Beer Name</th>\n                  <th className='tbl-left'>Beer Type</th>\n                  <th className='tbl-left'>Brewery Name</th>\n                  <th className='tbl-left'>Supplier Name</th>\n                  <th className='tbl-left'>Description</th>\n                  <th className='tbl-left'>Flavor</th>\n                  <th className='tbl-left'>Price per Keg ($)</th>\n                  <th className='tbl-left'>Serving Sizes</th>\n                  <th className='tbl-left'>Price per Service Size ($)</th>\n                  <th className='tbl-left'>Arrival Date</th>\n                  <th className='tbl-left'>Status</th>\n                  <th>Add To Tap</th>\n                  {/* <th></th> */}\n                </tr>\n              </thead>\n              <tbody>\n                {beers.slice(start, end).map((beer) => (\n                  <tr key={beer.product_id}>\n                    <td className='tbl-left'>{beer.tap_number}</td>\n                    <td className='tbl-left'>{beer.name}</td>\n                    <td className='tbl-left'>{beer.type}</td>\n                    <td className='tbl-left'>{breweryNames[beer.product_id]}</td>\n                    <td className='tbl-left'>{supplierNames[beer.supplier_id]}</td>\n                    <td className='tbl-left'>{beer.description}</td>\n                    <td className='tbl-left'>{beer.flavor_details}</td>\n                    <td className='tbl-left'>{beer.price_per_keg}</td>\n                    <td className='tbl-left'>{beer.serving_sizes}</td>\n                    <td className='tbl-left'>{beer.price_per_serving_size}</td>\n                    <td className='tbl-left'>{formatDate(beer.arrival_date)}</td>\n                    <td\n                      className=\"tbl-left\"\n                      style={{\n                        fontWeight: 'bolder',\n                        fontSize: '15px',\n                        color:\n                          beer.status === 'upcoming'\n                            ? 'grey'\n                            : beer.status === 'on-tap'\n                            ? 'tomato'\n                            :beer.status === 'ordered'\n                            ? 'orange'\n                            :beer.status === 'delivered'\n                            ? 'green'\n                            : 'red',\n                      }}\n                    >\n                      {beer.status}\n                    </td>\n                    <td>\n                      <Button>\n                        <Link to={`/beers/update/${beer.product_id}`} className=\"update-link\">\n                          <FontAwesomeIcon icon={faEdit} />\n                        </Link>\n                      </Button>\n                    </td>\n                    <td>\n                      {/* <Button \n                      onClick={() => handleDelete(beer.product_id)} \n                      variant=\"dark\"\n                      disabled={true}\n                      >\n                        <FontAwesomeIcon icon={faTrash} />\n                      </Button> */}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n            <div>\n              <Button\n                onClick={handlePrevious}\n                disabled={activePage === 0}\n                style={{\n                  background: 'none',\n                  color: 'black',\n                  border: 'none',\n                }}\n              >\n                Previous\n              </Button>\n              <Button\n                onClick={handleNext}\n                disabled={activePage === Math.ceil(beers.length / maxRecords) - 1}\n                style={{\n                  background: 'none',\n                  color: 'black',\n                  border: 'none',\n                }}\n              >\n                Next\n              </Button>\n            </div>\n            <br />\n            <Button variant='primary' size='lg'>\n              <Link to=\"/beers/add\" className=\"update-link\">\n                Order Beer\n              </Link>\n            </Button>\n          </>\n        )}\n      </Container>\n    </div>\n  );\n}\n\nexport default Beers;\n","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/taplist/TapList.jsx",["141"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button, Container, Table } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction TapList() {\n  const [tapList, setTapList] = useState([]);\n  const [untappedList, setUntappedList] = useState([]);\n  const tapListUrl = 'http://localhost:5001/api/tap/';\n  const untappedListUrl = 'http://localhost:5001/api/tap/untappedList';\n  const updateUrl = 'http://localhost:5001/api/tap/updateStatus';\n\n  useEffect(() => {\n    // Fetch data from the tapList URL\n    axios.get(tapListUrl).then((response) => {\n      if (response.data && response.data.tapList) {\n        setTapList(response.data.tapList);\n      } else {\n        console.error('tapList data is missing in the response');\n      }\n    });\n\n    // Fetch data from the untappedList URL\n    axios.get(untappedListUrl).then((response) => {\n      if (response.data && response.data.untappedList) {\n        // Filter out beers with status 'ordered'\n        const filteredUntappedList = response.data.untappedList.filter(\n          (beer) => beer.status !== 'ordered'\n        );\n        setUntappedList(filteredUntappedList);\n      } else {\n        console.error('untappedList data is missing in the response');\n      }\n    });\n  }, []);\n\n  const updateBeerStatus = (beerId, newStatus) => {\n    axios.patch(`${updateUrl}/${beerId}`, { status: newStatus }).then(() => {\n      // After updating the beer status, fetch both tapList and untappedList\n      axios.get(tapListUrl).then((tapResponse) => {\n        if (tapResponse.data && tapResponse.data.tapList) {\n          setTapList(tapResponse.data.tapList);\n        } else {\n          console.error('tapList data is missing in the response');\n        }\n      });\n\n      axios.get(untappedListUrl).then((untappedResponse) => {\n        if (untappedResponse.data && untappedResponse.data.untappedList) {\n          // Filter out beers with status 'ordered'\n          const filteredUntappedList = untappedResponse.data.untappedList.filter(\n            (beer) => beer.status !== 'ordered'\n          );\n          setUntappedList(filteredUntappedList);\n        } else {\n          console.error('untappedList data is missing in the response');\n        }\n      });\n    });\n  };\n\n  return (\n    <>\n      <Container className='contMargin'>\n        <br />\n        <h2 className='listUntapTitle'>Tapped List</h2>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th className=\"tbl-left\">Beer Name</th>\n              <th className=\"tbl-left\">Status</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tapList.map((beer) => (\n              <tr key={beer.product_id}>\n                <td className=\"tbl-left\">{beer.name}</td>\n                <td\n                  className=\"tbl-left\"\n                  style={{\n                    fontWeight: 'bolder',\n                    fontSize: '20px',\n                    color:\n                      beer.status === 'upcoming'\n                        ? 'grey'\n                        : beer.status === 'on-tap'\n                        ? 'tomato'\n                        : beer.status === 'ordered'\n                        ? 'orange'\n                        : 'red',\n                  }}\n                >\n                  {beer.status}\n                </td>\n                <td>\n                  <Button\n                    variant=\"danger\"\n                    onClick={() => updateBeerStatus(beer.product_id, 'empty')}\n                    className='tap'\n                  >\n                    Mark as Empty\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <br />\n        {/* <h2 className='listUntapTitle'>Untapped List</h2>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th className=\"tbl-left\">Beer Name</th>\n              <th className=\"tbl-left\">Status</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {untappedList.map((beer) => (\n              <tr key={beer.product_id}>\n                <td className=\"tbl-left\">{beer.name}</td>\n                <td\n                  className=\"tbl-left\"\n                  style={{\n                    fontWeight: 'bolder',\n                    fontSize: '20px',\n                    color:\n                      beer.status === 'upcoming'\n                        ? 'grey'\n                        : beer.status === 'delivered'\n                        ? 'green'\n                        : beer.status === 'ordered'\n                        ? 'orange'\n                        : 'red',\n                  }}\n                >\n                  {beer.status}\n                </td>\n                <td>\n                  <Button\n                    variant=\"primary\"\n                    onClick={() => updateBeerStatus(beer.product_id, 'on-tap')}\n                  >\n                    Put On Tap\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table> */}\n      </Container>\n    </>\n  );\n}\n\nexport default TapList;\n","/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/beers/AddBeer.jsx",[],"/home/unitvjdm/beertap.binsoft.online/beertap/src/pages/taplist/UntappedList.jsx",["142"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button, Container, Table } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction UntappedList() {\n  const [tapList, setTapList] = useState([]);\n  const [untappedList, setUntappedList] = useState([]);\n  const tapListUrl = 'http://localhost:5001/api/tap/';\n  const untappedListUrl = 'http://localhost:5001/api/tap/untappedList';\n  const updateUrl = 'http://localhost:5001/api/tap/updateStatus';\n\n  useEffect(() => {\n    // Fetch data from the tapList URL\n    // axios.get(tapListUrl).then((response) => {\n    //   if (response.data && response.data.tapList) {\n    //     setTapList(response.data.tapList);\n    //   } else {\n    //     console.error('tapList data is missing in the response');\n    //   }\n    // });\n\n    // Fetch data from the untappedList URL\n    axios.get(untappedListUrl).then((response) => {\n      if (response.data && response.data.untappedList) {\n        // Filter out beers with status 'ordered'\n        const filteredUntappedList = response.data.untappedList.filter(\n          (beer) => beer.status !== 'ordered'\n        );\n        setUntappedList(filteredUntappedList);\n      } else {\n        console.error('untappedList data is missing in the response');\n      }\n    });\n  }, []);\n\n  const updateBeerStatus = (beerId, newStatus) => {\n    axios.patch(`${updateUrl}/${beerId}`, { status: newStatus }).then(() => {\n      // After updating the beer status, fetch both tapList and untappedList\n      axios.get(tapListUrl).then((tapResponse) => {\n        if (tapResponse.data && tapResponse.data.tapList) {\n          setTapList(tapResponse.data.tapList);\n        } else {\n          console.error('tapList data is missing in the response');\n        }\n      });\n\n      axios.get(untappedListUrl).then((untappedResponse) => {\n        if (untappedResponse.data && untappedResponse.data.untappedList) {\n          // Filter out beers with status 'ordered'\n          const filteredUntappedList = untappedResponse.data.untappedList.filter(\n            (beer) => beer.status !== 'ordered'\n          );\n          setUntappedList(filteredUntappedList);\n        } else {\n          console.error('untappedList data is missing in the response');\n        }\n      });\n    });\n  };\n\n  return (\n    <>\n      <Container className='contMargin'>\n        {/* <h2 className='listTapTitle'>Tapped List</h2>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th className=\"tbl-left\">Beer Name</th>\n              <th className=\"tbl-left\">Status</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tapList.map((beer) => (\n              <tr key={beer.product_id}>\n                <td className=\"tbl-left\">{beer.name}</td>\n                <td\n                  className=\"tbl-left\"\n                  style={{\n                    fontWeight: 'bolder',\n                    fontSize: '20px',\n                    color:\n                      beer.status === 'upcoming'\n                        ? 'grey'\n                        : beer.status === 'on-tap'\n                        ? 'tomato'\n                        : beer.status === 'ordered'\n                        ? 'orange'\n                        : 'red',\n                  }}\n                >\n                  {beer.status}\n                </td>\n                <td>\n                  <Button\n                    variant=\"danger\"\n                    onClick={() => updateBeerStatus(beer.product_id, 'empty')}\n                    className='tap'\n                  >\n                    Mark as Empty\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table> */}\n        <br />\n        <h2 className='listUntapTitle'>Untapped List</h2>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th className=\"tbl-left\">Beer Name</th>\n              <th className=\"tbl-left\">Status</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {untappedList.map((beer) => (\n              <tr key={beer.product_id}>\n                <td className=\"tbl-left\">{beer.name}</td>\n                <td\n                  className=\"tbl-left\"\n                  style={{\n                    fontWeight: 'bolder',\n                    fontSize: '20px',\n                    color:\n                      beer.status === 'upcoming'\n                        ? 'grey'\n                        : beer.status === 'delivered'\n                        ? 'green'\n                        : beer.status === 'ordered'\n                        ? 'orange'\n                        : 'red',\n                  }}\n                >\n                  {beer.status}\n                </td>\n                <td>\n                  <Button\n                    variant=\"primary\"\n                    onClick={() => updateBeerStatus(beer.product_id, 'on-tap')}\n                  >\n                    Put On Tap\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </Container>\n    </>\n  );\n}\n\nexport default UntappedList;\n",{"ruleId":"143","severity":1,"message":"144","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":1,"column":27,"nodeType":"145","messageId":"146","endLine":1,"endColumn":36},{"ruleId":"143","severity":1,"message":"148","line":2,"column":55,"nodeType":"145","messageId":"146","endLine":2,"endColumn":61},{"ruleId":"143","severity":1,"message":"149","line":2,"column":63,"nodeType":"145","messageId":"146","endLine":2,"endColumn":71},{"ruleId":"143","severity":1,"message":"150","line":2,"column":73,"nodeType":"145","messageId":"146","endLine":2,"endColumn":84},{"ruleId":"143","severity":1,"message":"151","line":4,"column":24,"nodeType":"145","messageId":"146","endLine":4,"endColumn":31},{"ruleId":"143","severity":1,"message":"152","line":5,"column":10,"nodeType":"145","messageId":"146","endLine":5,"endColumn":24},{"ruleId":"143","severity":1,"message":"153","line":29,"column":8,"nodeType":"145","messageId":"146","endLine":29,"endColumn":13},{"ruleId":"143","severity":1,"message":"154","line":7,"column":10,"nodeType":"145","messageId":"146","endLine":7,"endColumn":20},{"ruleId":"143","severity":1,"message":"155","line":16,"column":9,"nodeType":"145","messageId":"146","endLine":16,"endColumn":21},{"ruleId":"143","severity":1,"message":"156","line":5,"column":10,"nodeType":"145","messageId":"146","endLine":5,"endColumn":19},{"ruleId":"143","severity":1,"message":"157","line":28,"column":22,"nodeType":"145","messageId":"146","endLine":28,"endColumn":35},{"ruleId":"143","severity":1,"message":"158","line":8,"column":12,"nodeType":"145","messageId":"146","endLine":8,"endColumn":20},{"ruleId":"143","severity":1,"message":"159","line":8,"column":22,"nodeType":"145","messageId":"146","endLine":8,"endColumn":33},{"ruleId":"143","severity":1,"message":"160","line":15,"column":10,"nodeType":"145","messageId":"146","endLine":15,"endColumn":28},{"ruleId":"143","severity":1,"message":"161","line":7,"column":18,"nodeType":"145","messageId":"146","endLine":7,"endColumn":25},{"ruleId":"143","severity":1,"message":"162","line":21,"column":10,"nodeType":"145","messageId":"146","endLine":21,"endColumn":20},{"ruleId":"143","severity":1,"message":"157","line":21,"column":22,"nodeType":"145","messageId":"146","endLine":21,"endColumn":35},{"ruleId":"143","severity":1,"message":"163","line":103,"column":9,"nodeType":"145","messageId":"146","endLine":103,"endColumn":21},{"ruleId":"143","severity":1,"message":"164","line":8,"column":10,"nodeType":"145","messageId":"146","endLine":8,"endColumn":22},{"ruleId":"143","severity":1,"message":"165","line":7,"column":10,"nodeType":"145","messageId":"146","endLine":7,"endColumn":17},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Routes' is defined but never used.","'Navigate' is defined but never used.","'useNavigate' is defined but never used.","'useUser' is defined but never used.","'loginWithToken' is defined but never used.","'Login' is defined but never used.","'isLoggedIn' is assigned a value but never used.","'handleLogout' is assigned a value but never used.","'useParams' is defined but never used.","'setIsDisabled' is assigned a value but never used.","'required' is assigned a value but never used.","'setRequired' is assigned a value but never used.","'updateConfirmation' is assigned a value but never used.","'faTrash' is defined but never used.","'isDisabled' is assigned a value but never used.","'handleDelete' is assigned a value but never used.","'untappedList' is assigned a value but never used.","'tapList' is assigned a value but never used."]